#!/usr/bin/env python3
import ftplib
import logging
import lzma
import os
import subprocess
import tarfile

# Directories
prefix = os.path.abspath('toolchain')
folders = {
    'tardir': os.path.join(prefix, 'tarball'),
    'srcdir': os.path.join(prefix, 'src'),
    'objdir': os.path.join(prefix, 'obj'),
    'builddir': os.path.join(prefix, 'build')
}

class Version:
    def __init__(self, major, minor, patch):
        self.major = int(major),
        self.minor = int(minor),
        self.patch = int(patch)

    def __eq__(self, other):
        return self.major == other.major \
                and self.minor == other.minor \
                and self.patch == other.patch

    def _lt_(self, other):
        return self.major < other.major \
                or self.major == other.major and self.minor < other.minor \
                or self.major == other.major and self.minor == other.minor and self.patch == other.patch

    def _le_(self, other):
        return self._lt_(other) or self._eq_(other)

    def _gt_(self, other):
        return not self._le_(other)

    def _ge_(self, other):
        return not self._lt_(other)

    @classmethod
    def fromString(version):
        return cls(*version.split(sep='.'))


packages = [
    {
        'name': 'gcc',
        'version': '8.3.0',
        'uri' : 'gcc/gcc-8.3.0',
        'format': 'xz',
        'dependencies': [
            'gmp',
        ]
    },
    {
        'name': 'gmp',
        'version': '6.1.2',
        'uri' : 'gmp',
        'format': 'xz'
        'dependencies': [
            'gmp',
        ]
    },
    {
        'name': 'm4',
        'version': '1.4.18',
        'uri' : 'm4',
        'format': 'xz'
        'dependencies': [
            'gmp',
        ]
    },
    {
        'name': 'mpc',
        'version': '1.1.0',
        'uri' : 'mpc',
        'format': 'gz'
        'dependencies': [
            'gmp',
        ]
    },
    {
        'name': 'mpfr',
        'version': '4.0.2',
        'uri' : 'mpfr',
        'format': 'xz'
        'dependencies': [
            '>=gmp-5.0.0',
        ]
    }
]


# Mirrors
gnu_mirror='ftp.gnu.org'

# Logging configuration
logging.basicConfig(filename='toolchain.log', level=logging.INFO)

def create_folders():
    logging.info('Creating toolchain folders...')
    for name, path in folders.items():
        if not os.path.exists(path):
            logging.info('Creating {}'.format(path))
            os.makedirs(path)
    logging.info('Toolchain folders created.')

def download_sources():
    original_cwd = os.getcwd()
    os.chdir(folders['tardir'])
    logging.info('Downloading tarballs into {}'.format(folders['tardir']))

    ftp = ftplib.FTP(gnu_mirror)
    ftp.login()
    logging.info('Logged as anonymous into {}'.format(gnu_mirror))

    for package in packages:
        ftp.cwd('/gnu/{}'.format(package['uri']))
        logging.info('Accesed {}'.format(ftp.pwd()))
        filename = '{0}-{1}.tar.{2}'.format(package['name'],package['version'], package['format'])
        if not os.path.exists('{0}/{1}'.format(folders['tardir'], filename)):
            logging.info('Downloading {}'.format(filename))
            with open(filename, 'wb') as file:
                ftp.retrbinary('RETR {}'.format(filename), file.write)

    logging.info('Logging out of {}...'.format(gnu_mirror))
    ftp.quit()
    os.chdir(original_cwd)


def extract_sources():
    original_cwd = os.getcwd()
    os.chdir(folders['srcdir'])

    for package in packages:
        src_folder = '{0}/{1}-{2}'.format(folders['srcdir'], package['name'], package['version'])
        if not os.path.exists(src_folder):
            filename = '{0}/{1}-{2}.tar.{3}'.format(folders['tardir'], package['name'],
                    package['version'], package['format'])
            with tarfile.open(filename, mode='r:{}'.format(package['format'])) as tarball:
                tarball.extractall(path=folders['srcdir'])
    os.chdir(original_cwd)


if __name__ == '__main__':
    create_folders()
    download_sources()
    extract_sources()
