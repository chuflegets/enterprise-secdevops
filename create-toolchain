#!/usr/bin/env python
import ftplib
import logging
import os
import subprocess

# Directories
prefix = os.path.abspath('toolchain')
folders = {
    'tardir': os.path.join(prefix, 'tarball'),
    'srcdir': os.path.join(prefix, 'src'),
    'objdir': os.path.join(prefix, 'obj'),
    'builddir': os.path.join(prefix, 'build')
}

packages = [
    {
        'name': 'gcc',
        'version': '8.3.0',
        'uri' : 'gcc/gcc-8.3.0',
        'format': 'xz'
    },
    {
        'name': 'gmp',
        'version': '6.1.2',
        'uri' : 'gmp',
        'format': 'xz'
    },
    {
        'name': 'm4',
        'version': '1.4.18',
        'uri' : 'm4',
        'format': 'xz'
    },
    {
        'name': 'mpc',
        'version': '1.1.0',
        'uri' : 'mpc',
        'format': 'gz'
    },
    {
        'name': 'mpfr',
        'version': '4.0.2',
        'uri' : 'mpfr',
        'format': 'xz'
    }
]


# Mirrors
gnu_mirror='ftp.gnu.org'

def create_folders():
    logging.info('Creating toolchain folders...')
    for name, path in folders.items():
        if not os.path.exists(path):
            logging.info('Creating %s' % path)
            os.makedirs(path)
    logging.info('Toolchain folders created.')

def download_sources():
    original_cwd = os.getcwd()
    os.chdir(folders['tardir'])
    logging.info('Downloading tarballs into %s' % folders['tardir'])

    ftp = ftplib.FTP(gnu_mirror)
    ftp.login()
    logging.info('Logged as anonymous into %s' % gnu_mirror)

    for package in packages:
        ftp.cwd('/gnu/%s' % package['uri'])
        logging.info('Accesed %s' % ftp.pwd())
        filename = package['name'] + '-' + package['version'] + '.tar.' + package['format']
        if not os.path.exists(folders['tardir'] + '/' + filename):
            logging.info('Downloading %s' % filename)
            with open(filename, 'wb') as file:
                ftp.retrbinary('RETR %s' % filename, file.write)

    logging.info('Logging out of %s...' % gnu_mirror)
    ftp.quit()


create_folders()
download_sources()
